@startuml
class MappingType {
    + Name : string <<get>> <<set>>
}
class "List`1"<T> {
}
MappingType --> "Id" Guid
MappingType --> "CreatedBy" Guid
MappingType --> "CreatedOn" DateTime
MappingType --> "Releases<Release.Release>" "List`1"
MappingType --> "LockedVersionedComponents<LockingEntry>" "List`1"
class GameVersion {
    + Name : string <<get>> <<set>>
    + IsPreRelease : bool <<get>> <<set>>
    + IsSnapshot : bool <<get>> <<set>>
}
GameVersion --> "Id" Guid
GameVersion --> "CreatedOn" DateTime
GameVersion --> "CreatedBy" Guid
enum Distribution {
    BOTH,
    SERVER_ONLY,
    CLIENT_ONLY,
    UNKNOWN,
}
class Comment {
    + Content : string <<get>> <<set>>
    + HasBeenEdited : bool <<get>> <<set>>
    + IsDeleted : bool <<get>> <<set>>
    + DeletedBy : Guid? <<get>> <<set>>
    + DeletedOn : DateTime? <<get>> <<set>>
}
class "List`1"<T> {
}
Comment --> "Id" Guid
Comment --> "CreatedBy" Guid
Comment --> "CreatedOn" DateTime
Comment --> "Reactions<CommentReaction>" "List`1"
Comment --> "ProposedMapping" ProposedMapping
Comment --> "Release" Release
Comment --> "Parent" Comment
Comment --> "Children<Comment>" "List`1"
class CommentReaction {
}
CommentReaction --> "Id" Guid
CommentReaction --> "CreatedBy" Guid
CommentReaction --> "CreatedOn" DateTime
CommentReaction --> "Type" CommentReactionType
CommentReaction --> "Comment" Comment
enum CommentReactionType {
    PLUS_ONE,
    MINUS_ONE,
    SMILE,
    CONFUSED,
    HEART,
    HOORAY,
    ROCKET,
    EYES,
}
class Release {
    + Name : string <<get>> <<set>>
    + IsSnapshot : bool <<get>> <<set>> = false
}
class "List`1"<T> {
}
Release --> "Id" Guid
Release --> "CreatedOn" DateTime
Release --> "CreatedBy" Guid
Release --> "GameVersion" GameVersion
Release --> "MappingType" MappingType
Release --> "Components<ReleaseComponent>" "List`1"
Release --> "Comments<Comment>" "List`1"
class ReleaseComponent {
}
ReleaseComponent --> "Id" Guid
ReleaseComponent --> "Release" Release
ReleaseComponent --> "Mapping" CommittedMapping
class Component {
}
class "List`1"<T> {
}
Component --> "Id" Guid
Component --> "Type" ComponentType
Component --> "CreatedOn" DateTime
Component --> "CreatedBy" Guid
Component --> "VersionedComponents<VersionedComponent>" "List`1"
class LockingEntry {
}
LockingEntry --> "Id" Guid
LockingEntry --> "VersionedComponent" VersionedComponent
LockingEntry --> "MappingType" MappingType
enum ComponentType {
    PACKAGE,
    CLASS,
    METHOD,
    FIELD,
    PARAMETER,
}
class VersionedComponent {
}
class "List`1"<T> {
}
VersionedComponent --> "Id" Guid
VersionedComponent --> "GameVersion" GameVersion
VersionedComponent --> "CreatedBy" Guid
VersionedComponent --> "CreatedOn" DateTime
VersionedComponent --> "Component" Component
VersionedComponent --> "Metadata" MetadataBase
VersionedComponent --> "Mappings<CommittedMapping>" "List`1"
VersionedComponent --> "Proposals<ProposedMapping>" "List`1"
VersionedComponent --> "LockedMappingTypes<LockingEntry>" "List`1"
abstract class MappingBase {
    + InputMapping : string <<get>> <<set>>
    + OutputMapping : string <<get>> <<set>>
    + Documentation : string <<get>> <<set>>
}
MappingBase --> "Id" Guid
MappingBase --> "VersionedComponent" VersionedComponent
MappingBase --> "CreatedOn" DateTime
MappingBase --> "CreatedBy" Guid
MappingBase --> "Distribution" Distribution
MappingBase --> "MappingType" MappingType
class CommittedMapping {
}
class "List`1"<T> {
}
MappingBase <|-- CommittedMapping
CommittedMapping --> "ProposedMapping" ProposedMapping
CommittedMapping --> "Releases<ReleaseComponent>" "List`1"
class ProposedMapping {
    + IsOpen : bool <<get>> <<set>>
    + IsPublicVote : bool <<get>> <<set>>
    + <<virtual>> ClosedBy : Guid? <<get>> <<set>>
    + ClosedOn : DateTime? <<get>> <<set>>
    + Merged : bool? <<get>> <<set>>
    + CommittedWithId : Guid? <<get>> <<set>>
}
class "List`1"<T> {
}
MappingBase <|-- ProposedMapping
ProposedMapping --> "Votes<VotingRecord>" "List`1"
ProposedMapping --> "Comments<Comment>" "List`1"
ProposedMapping --> "CommittedWith" CommittedMapping
class ParameterMetadata {
    + Index : int <<get>> <<set>>
}
MetadataBase <|-- ParameterMetadata
ParameterMetadata --> "ParameterOf" MethodMetadata
class MetadataBase {
}
MetadataBase --> "VersionedComponent" VersionedComponent
MetadataBase --> "Id" Guid
class MethodMetadata {
    + Descriptor : string <<get>> <<set>>
}
class "List`1"<T> {
}
ClassMemberMetadataBase <|-- MethodMetadata
MethodMetadata --> "Parameters<ParameterMetadata>" "List`1"
class ClassMetadata {
}
class "List`1"<T> {
}
MetadataBase <|-- ClassMetadata
ClassMetadata --> "Outer" ClassMetadata
ClassMetadata --> "InnerClasses<ClassMetadata>" "List`1"
ClassMetadata --> "InheritsFrom<ClassMetadata>" "List`1"
ClassMetadata --> "IsInheritedBy<ClassMetadata>" "List`1"
ClassMetadata --> "Package" PackageMetadata
ClassMetadata --> "Methods<MethodMetadata>" "List`1"
ClassMetadata --> "Fields<FieldMetadata>" "List`1"
class ClassMemberMetadataBase {
    + IsStatic : bool <<get>> <<set>>
}
MetadataBase <|-- ClassMemberMetadataBase
ClassMemberMetadataBase --> "MemberOf" ClassMetadata
class PackageMetadata {
}
class "List`1"<T> {
}
MetadataBase <|-- PackageMetadata
PackageMetadata --> "Parent" PackageMetadata
PackageMetadata --> "ChildPackages<PackageMetadata>" "List`1"
PackageMetadata --> "Classes<ClassMetadata>" "List`1"
class FieldMetadata {
    + Type : string <<get>> <<set>>
}
ClassMemberMetadataBase <|-- FieldMetadata
class VotingRecord {
    + IsForVote : bool <<get>> <<set>>
    + HasBeenRescinded : bool <<get>> <<set>>
}
VotingRecord --> "Id" Guid
VotingRecord --> "Proposal" ProposedMapping
VotingRecord --> "CreatedOn" DateTime
VotingRecord --> "VotedBy" Guid
@enduml
